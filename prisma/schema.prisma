generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {

  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  name     String
  info     String? @default("Disponible")
  imageUrl String 
  email    String 
  phone    String @unique

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]
  statuses Status[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Conversation {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?
  messagesIds   String[] @db.ObjectId
  messages      Message[]
  userIds       String[] @db.ObjectId
  users         Profile[] @relation(fields: [userIds], references: [id])
}

model Message {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  body  String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen Profile[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender Profile @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Status {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  content     String?
  contentUrl  String?
  contentType String
  createdAt   DateTime @default(now())

  profileId   String @db.ObjectId
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}